"""

"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'get_incident_1' block
    get_incident_1(container=container)

    return

@phantom.playbook_block()
def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_1() called")

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            [data_summary_sha256_value, "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        filter_1(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    add_task_note_1(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def get_incident_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_incident_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    external_id_value = container.get("external_id", None)

    parameters = []

    if external_id_value is not None:
        parameters.append({
            "id": external_id_value,
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get incident", parameters=parameters, name="get_incident_1", assets=["builtin_mc_connector"], callback=get_phase_1)

    return


@phantom.playbook_block()
def get_phase_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_phase_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.display_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'get_phase_1' call
    for get_incident_1_result_item in get_incident_1_result_data:
        if get_incident_1_result_item[0] is not None:
            parameters.append({
                "id": get_incident_1_result_item[0],
                "context": {'artifact_id': get_incident_1_result_item[1], 'artifact_external_id': get_incident_1_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get phase", parameters=parameters, name="get_phase_1", assets=["builtin_mc_connector"], callback=get_task_1)

    return


@phantom.playbook_block()
def get_task_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_task_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.display_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.tasks.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'get_task_1' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_phase_1_result_item in get_phase_1_result_data:
            if get_incident_1_result_item[0] is not None and get_phase_1_result_item[0] is not None:
                parameters.append({
                    "id": get_incident_1_result_item[0],
                    "task_id": get_phase_1_result_item[0],
                    "context": {'artifact_id': get_phase_1_result_item[1], 'artifact_external_id': get_phase_1_result_item[2]},
                })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get task", parameters=parameters, name="get_task_1", assets=["builtin_mc_connector"], callback=decision_1)

    return


@phantom.playbook_block()
def add_task_note_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    title_formatted_string = phantom.format(
        container=container,
        template="""* Crowdstrike Malware Triage Summary *\n""",
        parameters=[])
    content_formatted_string = phantom.format(
        container=container,
        template="""Ignoring alert because no SHA256 file hash was found\n""",
        parameters=[])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_1' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and title_formatted_string is not None and content_formatted_string is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": title_formatted_string,
                        "content": content_formatted_string,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_1", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def filter_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_1() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["get_incident_1:action_result.data.*.incident_type", "==", "malware"]
        ],
        name="filter_1:condition_1",
        case_sensitive=False,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        get_indicator_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def get_indicator_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_indicator_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)

    parameters = []

    parameters.append({
        "indicator_type": "sha256",
        "indicator_value": data_summary_sha256_value,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get indicator", parameters=parameters, name="get_indicator_1", assets=["crowdstrike splunk soar connector"], callback=query_device_2)

    return


@phantom.playbook_block()
def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_3() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["Indicator not found", "in", "get_indicator_1:action_result.message"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        list_processes_with_hash(action=action, success=success, container=container, results=results, handle=handle)
        hunt_file_1(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    decision_5(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def list_processes_with_hash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("list_processes_with_hash() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)
    query_device_2_result_data = phantom.collect2(container=container, datapath=["query_device_2:action_result.data.*.device_id","query_device_2:action_result.parameter.context.artifact_id","query_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'list_processes_with_hash' call
    for query_device_2_result_item in query_device_2_result_data:
        if query_device_2_result_item[0] is not None and data_summary_sha256_value is not None:
            parameters.append({
                "id": query_device_2_result_item[0],
                "ioc": data_summary_sha256_value,
                "limit": 100,
                "context": {'artifact_id': query_device_2_result_item[1], 'artifact_external_id': query_device_2_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("list processes", parameters=parameters, name="list_processes_with_hash", assets=["crowdstrike splunk soar connector"], callback=get_process_detail_1)

    return


@phantom.playbook_block()
def hunt_file_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("hunt_file_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)

    parameters = []

    if data_summary_sha256_value is not None:
        parameters.append({
            "hash": data_summary_sha256_value,
            "limit": 100,
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("hunt file", parameters=parameters, name="hunt_file_1", assets=["crowdstrike splunk soar connector"], callback=get_system_info_1)

    return


@phantom.playbook_block()
def decision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_5() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["get_indicator_1:action_result.data.*.resources.*.policy", "==", "none"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        add_task_note_3(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        conditions=[
            ["get_indicator_1:action_result.data.*.resources.*.policy", "==", "detect"]
        ],
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        set_urgency_to_high(action=action, success=success, container=container, results=results, handle=handle)
        repeat_incident_note(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 3
    add_task_note_2(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def get_process_detail_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_process_detail_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    list_processes_with_hash_result_data = phantom.collect2(container=container, datapath=["list_processes_with_hash:action_result.data.*.falcon_process_id","list_processes_with_hash:action_result.parameter.context.artifact_id","list_processes_with_hash:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'get_process_detail_1' call
    for list_processes_with_hash_result_item in list_processes_with_hash_result_data:
        if list_processes_with_hash_result_item[0] is not None:
            parameters.append({
                "falcon_process_id": list_processes_with_hash_result_item[0],
                "context": {'artifact_id': list_processes_with_hash_result_item[1], 'artifact_external_id': list_processes_with_hash_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get process detail", parameters=parameters, name="get_process_detail_1", assets=["crowdstrike splunk soar connector"], callback=get_process_detail_1_callback)

    return


@phantom.playbook_block()
def get_process_detail_1_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_process_detail_1_callback() called")

    
    debug_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)
    join_noop_3(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)


    return


@phantom.playbook_block()
def get_system_info_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("get_system_info_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    hunt_file_1_result_data = phantom.collect2(container=container, datapath=["hunt_file_1:action_result.data.*.device_id","hunt_file_1:action_result.parameter.context.artifact_id","hunt_file_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'get_system_info_1' call
    for hunt_file_1_result_item in hunt_file_1_result_data:
        if hunt_file_1_result_item[0] is not None:
            parameters.append({
                "id": hunt_file_1_result_item[0],
                "context": {'artifact_id': hunt_file_1_result_item[1], 'artifact_external_id': hunt_file_1_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get system info", parameters=parameters, name="get_system_info_1", assets=["crowdstrike splunk soar connector"], callback=join_noop_3)

    return


@phantom.playbook_block()
def add_task_note_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    title_formatted_string = phantom.format(
        container=container,
        template="""** Policy not found **\n""",
        parameters=[
            ""
        ])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_2' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and title_formatted_string is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": title_formatted_string,
                        "content": "The playbook received an unexpected indicator policy and needs to be extended to handle this situation.",
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_2", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def add_task_note_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_3() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    content_formatted_string = phantom.format(
        container=container,
        template="""The file hash indicator has a detection policy of none, so previous investigations have found that the file is not harmful. This playbook will take no further action and the event will be closed.\n""",
        parameters=[])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_3' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and content_formatted_string is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "** Policy is none **",
                        "content": content_formatted_string,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_3", assets=["builtin_mc_connector"], callback=close_incident)

    return


@phantom.playbook_block()
def close_incident(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("close_incident() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'close_incident' call
    for get_incident_1_result_item in get_incident_1_result_data:
        if get_incident_1_result_item[0] is not None:
            parameters.append({
                "status": "Closed",
                "incident_id": get_incident_1_result_item[0],
                "context": {'artifact_id': get_incident_1_result_item[1], 'artifact_external_id': get_incident_1_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update incidents", parameters=parameters, name="close_incident", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def set_urgency_to_high(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("set_urgency_to_high() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'set_urgency_to_high' call
    for get_incident_1_result_item in get_incident_1_result_data:
        if get_incident_1_result_item[0] is not None:
            parameters.append({
                "urgency": "High",
                "incident_id": get_incident_1_result_item[0],
                "context": {'artifact_id': get_incident_1_result_item[1], 'artifact_external_id': get_incident_1_result_item[2]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update incidents", parameters=parameters, name="set_urgency_to_high", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def repeat_incident_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("repeat_incident_note() called")

    template = """CrowdStrike detected a file on an endpoint which matched a previously detected file hash: \n\n| Field | Value |\n|---|---|\n| Host | {0} |\n| Command Line | {1} |\n| SHA 256 | {2} |\n| File Path | {3}\\\\{4} |\n| CrowdStrike Detection Link | {5} |  \n\n---\n\nThis event will have the severity escalated to high, and should be investigated further.\n"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:filter_1:condition_1:container:data.summary. src_nt_host",
        "filtered-data:filter_1:condition_1:container:data.summary.commandline",
        "filtered-data:filter_1:condition_1:container:data.summary.sha256",
        "filtered-data:filter_1:condition_1:container:data.summary.filepath",
        "filtered-data:filter_1:condition_1:container:data.summary.filename",
        "filtered-data:filter_1:condition_1:container:data.summary.falconhostlink"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="repeat_incident_note")

    add_task_note_4(container=container)

    return


@phantom.playbook_block()
def add_task_note_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_4() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    title_formatted_string = phantom.format(
        container=container,
        template="""** Known Malicious File **\n""",
        parameters=[])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    repeat_incident_note = phantom.get_format_data(name="repeat_incident_note")

    parameters = []

    # build parameters list for 'add_task_note_4' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and title_formatted_string is not None and repeat_incident_note is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": title_formatted_string,
                        "content": repeat_incident_note,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_4", assets=["builtin_mc_connector"], callback=prompt_2)

    return


@phantom.playbook_block()
def add_task_note_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_5() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    title_formatted_string = phantom.format(
        container=container,
        template="""# System and Process details""",
        parameters=[])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    system_and_process_info_note__system_and_process_tasknote = json.loads(_ if (_ := phantom.get_run_data(key="system_and_process_info_note:system_and_process_tasknote")) != "" else "null")  # pylint: disable=used-before-assignment

    parameters = []

    # build parameters list for 'add_task_note_5' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and title_formatted_string is not None and system_and_process_info_note__system_and_process_tasknote is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": title_formatted_string,
                        "content": system_and_process_info_note__system_and_process_tasknote,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    phantom.debug(get_incident_1_result_data)
    phantom.debug(get_task_1_result_data)
    phantom.debug(get_phase_1_result_data)
    phantom.debug(system_and_process_info_note__system_and_process_tasknote)

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_5", assets=["builtin_mc_connector"], callback=crowdstrike_new_file_detection)

    return


@phantom.playbook_block()
def debug_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("debug_1() called")

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)
    query_device_2_result_data = phantom.collect2(container=container, datapath=["query_device_2:action_result.data.*.device_id","query_device_2:action_result.parameter.context.artifact_id","query_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)
    list_processes_with_hash_result_data = phantom.collect2(container=container, datapath=["list_processes_with_hash:action_result.data.*.falcon_process_id","list_processes_with_hash:action_result.parameter.context.artifact_id","list_processes_with_hash:action_result.parameter.context.artifact_external_id"], action_results=results)

    query_device_2_result_item_0 = [item[0] for item in query_device_2_result_data]
    list_processes_with_hash_result_item_0 = [item[0] for item in list_processes_with_hash_result_data]

    parameters = []

    parameters.append({
        "input_1": data_summary_sha256_value,
        "input_2": query_device_2_result_item_0,
        "input_3": list_processes_with_hash_result_item_0,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="community/debug", parameters=parameters, name="debug_1")

    return


@phantom.playbook_block()
def system_and_process_info_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("system_and_process_info_note() called")

    data_summary_src_nt_host_value = container.get("data", {}).get("summary", {}).get("src_nt_host", None)
    data_summary_commandline_value = container.get("data", {}).get("summary", {}).get("commandline", None)
    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)
    data_summary_file_value = container.get("data", {}).get("summary", {}).get("file", None)
    data_summary_falconhostlink_value = container.get("data", {}).get("summary", {}).get("falconhostlink", None)
    hunt_file_1_result_data = phantom.collect2(container=container, datapath=["hunt_file_1:action_result.summary.device_count"], action_results=results)

    hunt_file_1_summary_device_count = [item[0] for item in hunt_file_1_result_data]

    system_and_process_info_note__system_and_process_tasknote = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    
    phantom.debug(data_summary_src_nt_host_value)
    phantom.debug(data_summary_commandline_value)
    phantom.debug(data_summary_sha256_value)
    phantom.debug(data_summary_file_value)
    phantom.debug(data_summary_falconhostlink_value)
    phantom.debug(hunt_file_1_result_data)
    note = (
        "\n**System and Process information**\n"
            "| Field | Value |\n"
            "| :--- | :--- |\n"
        )
    note += "|{}|{}|\n".format("Host", data_summary_src_nt_host_value)
    note += "|{}|{}|\n".format("CommandLine", data_summary_commandline_value)
    note += "|{}|{}|\n".format("SHA 256", data_summary_sha256_value)
    note += "|{}|{}|\n".format("File", data_summary_file_value)
    note += "|{}|{}|\n".format("Falcon Host Link", data_summary_falconhostlink_value)
    note += "|{}|{}|\n".format("Count of machines that have the file on disk", hunt_file_1_summary_device_count)
    note += "|{}|{}|\n".format("Details of processes associated with the file hash", "<see 'get process details' action results>")
    note += "|{}|{}|\n".format("System information of machines that have the file on disk", "<see 'get system info' action results>")
    
    system_and_process_info_note__system_and_process_tasknote = note

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key="system_and_process_info_note:system_and_process_tasknote", value=json.dumps(system_and_process_info_note__system_and_process_tasknote))

    add_task_note_5(container=container)

    return


@phantom.playbook_block()
def query_device_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("query_device_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filter_formatted_string = phantom.format(
        container=container,
        template="""hostname:'{0}'\n""",
        parameters=[
            "container:data.summary.computername"
        ])

    data_summary_computername_value = container.get("data", {}).get("summary", {}).get("computername", None)

    parameters = []

    parameters.append({
        "limit": 1,
        "filter": filter_formatted_string,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("query device", parameters=parameters, name="query_device_2", assets=["crowdstrike splunk soar connector"], callback=query_device_2_callback)

    return


@phantom.playbook_block()
def query_device_2_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("query_device_2_callback() called")

    
    decision_3(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)
    debug_2(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)


    return


@phantom.playbook_block()
def debug_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("debug_2() called")

    data_summary_computername_value = container.get("data", {}).get("summary", {}).get("computername", None)
    query_device_2_result_data = phantom.collect2(container=container, datapath=["query_device_2:action_result.parameter.filter","query_device_2:action_result.parameter.limit","query_device_2:action_result.summary.total_devices","query_device_2:action_result.parameter.context.artifact_id","query_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)

    query_device_2_parameter_filter = [item[0] for item in query_device_2_result_data]
    query_device_2_parameter_limit = [item[1] for item in query_device_2_result_data]
    query_device_2_summary_total_devices = [item[2] for item in query_device_2_result_data]

    parameters = []

    parameters.append({
        "input_1": data_summary_computername_value,
        "input_2": query_device_2_parameter_filter,
        "input_3": query_device_2_parameter_limit,
        "input_4": query_device_2_summary_total_devices,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="community/debug", parameters=parameters, name="debug_2")

    return


@phantom.playbook_block()
def join_noop_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_noop_3() called")

    if phantom.completed(action_names=["get_process_detail_1", "get_system_info_1"]):
        # call connected block "noop_3"
        noop_3(container=container, handle=handle)

    return


@phantom.playbook_block()
def noop_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("noop_3() called")

    parameters = [{}]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="community/noop", parameters=parameters, name="noop_3", callback=system_and_process_info_note)

    return


@phantom.playbook_block()
def crowdstrike_new_file_detection(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("crowdstrike_new_file_detection() called")

    ################################################################################
    # Prompt the user to determine whether or not to create an Indicator for the file 
    # hash and whether or not to quarantine the endpoint.
    ################################################################################

    # set user and message variables for phantom.prompt call

    user = "jarora"
    role = None
    message = """System and Process information\n\n\nHost:  {0}\n\nCommandLine:  {1}\n\nSHA256:  {2}\n\nFile:  {3}\n\nFalcon Host Link:  {4}\n\nNumber of devices:  {5}\n\n"""

    # parameter list for template variable replacement
    parameters = [
        "container:data.summary.src_nt_host",
        "container:data.summary.commandline",
        "container:data.summary.sha256",
        "container:data.summary.file",
        "container:data.summary.falconhostlink",
        "hunt_file_1:action_result.summary.device_count"
    ]

    # responses
    response_types = [
        {
            "prompt": "Should SOAR create an Indicator in CrowdStrike to track this file hash from now on?",
            "options": {
                "type": "list",
                "choices": [
                    "No, do not create an Indicator in CrowdStrike at this time.",
                    "Yes, create a CrowdStrike Indicator to detect and block this file hash from now on. (True Positive)",
                    "Yes, create a CrowdStrike Indicator to ignore this file hash from now on. (False Positive)"
                ],
            },
        },
        {
            "prompt": "Should SOAR quarantine the endpoint?",
            "options": {
                "type": "list",
                "choices": [
                    "Yes",
                    "No"
                ],
            },
        }
    ]

    phantom.prompt2(container=container, user=user, role=role, message=message, respond_in_mins=60, name="crowdstrike_new_file_detection", parameters=parameters, response_types=response_types, callback=crowdstrike_new_file_detection_callback)

    return


@phantom.playbook_block()
def crowdstrike_new_file_detection_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("crowdstrike_new_file_detection_callback() called")

    
    indicator_decision(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)
    quarantine_decision(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=filtered_artifacts, filtered_results=filtered_results)


    return


@phantom.playbook_block()
def indicator_decision(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("indicator_decision() called")

    ################################################################################
    # Parse the prompt response to determine how to handle the indicator.
    ################################################################################

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["No, do not create an Indicator in CrowdStrike at this time.", "in", "crowdstrike_new_file_detection:action_result.summary.responses.0"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        conditions=[
            ["Yes, create a CrowdStrike Indicator to detect and block this file hash from now on. (True Positive)", "in", "crowdstrike_new_file_detection:action_result.summary.responses.0"]
        ],
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        add_task_note_no_indicator(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 3
    found_match_3 = phantom.decision(
        container=container,
        conditions=[
            ["Yes, create a CrowdStrike Indicator to ignore this file hash from now on. (False Positive)", "in", "crowdstrike_new_file_detection:action_result.summary.responses.0"]
        ],
        delimiter=None)

    # call connected blocks if condition 3 matched
    if found_match_3:
        format_ignore_description(action=action, success=success, container=container, results=results, handle=handle)
        format_detect_description(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def quarantine_decision(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("quarantine_decision() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["crowdstrike_new_file_detection:action_result.summary.responses.1", "==", "Yes"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        quarantine_device_1(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    add_task_note_no_quarantine(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def format_ignore_description(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_ignore_description() called")

    ################################################################################
    # Format a description to provide when creating an Indicator with a policy of 
    # "none".
    ################################################################################

    template = """This indicator was created by SOAR in the playbook crowdstrike_malware_triage_modern to ignore CrowdStrike detections based on the file hash first seen in {0} and processed in SOAR as {1}\n"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:filter_1:condition_1:container:data.summary.falconhostlink",
        "container:url"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_ignore_description")

    upload_indicator_1(container=container)

    return


@phantom.playbook_block()
def upload_indicator_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("upload_indicator_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)
    format_ignore_description = phantom.get_format_data(name="format_ignore_description")

    parameters = []

    if data_summary_sha256_value is not None:
        parameters.append({
            "ioc": data_summary_sha256_value,
            "action": "allow",
            "source": "Splunk SOAR Playbook crowdstrike_malware_triage_modern",
            "platforms": "mac,windows,linux",
            "description": format_ignore_description,
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("upload indicator", parameters=parameters, name="upload_indicator_1", assets=["crowdstrike splunk soar connector"], callback=add_task_note_10)

    return


@phantom.playbook_block()
def add_task_note_no_indicator(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_no_indicator() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_no_indicator' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "Analyst decision on indicator",
                        "content": "The analyst decided not to create a custom indicator for the file hash.",
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_no_indicator", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def format_detect_description(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_detect_description() called")

    ################################################################################
    # Format a description to provide when creating an Indicator with a policy of 
    # "detect".
    ################################################################################

    template = """This indicator was created by SOAR in the playbook crowdstrike_malware_triage_modern to detect and block process executions based on the file hash first seen in {0} and processed in SOAR as {1}\n"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:filter_1:condition_1:container:data.summary.falconhostlink",
        "container:url"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_detect_description")

    create_detect_indicator(container=container)

    return


@phantom.playbook_block()
def create_detect_indicator(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("create_detect_indicator() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Create an Indicator to detect and block this file hash.
    ################################################################################

    data_summary_sha256_value = container.get("data", {}).get("summary", {}).get("sha256", None)

    parameters = []

    if data_summary_sha256_value is not None:
        parameters.append({
            "ioc": data_summary_sha256_value,
            "action": "detect",
            "source": "IOC uploaded via Splunk SOAR",
            "severity": "high",
            "platforms": "mac,windows,linux",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("upload indicator", parameters=parameters, name="create_detect_indicator", assets=["crowdstrike splunk soar connector"], callback=add_task_note_9)

    return


@phantom.playbook_block()
def quarantine_device_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("quarantine_device_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Block the endpoint from everything but the configured allowlist of network addresses 
    # while the investigation is ongoing.
    ################################################################################

    query_device_2_result_data = phantom.collect2(container=container, datapath=["query_device_2:action_result.data.*.hostname","query_device_2:action_result.data.*.device_id","query_device_2:action_result.parameter.context.artifact_id","query_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'quarantine_device_1' call
    for query_device_2_result_item in query_device_2_result_data:
        parameters.append({
            "hostname": query_device_2_result_item[0],
            "device_id": query_device_2_result_item[1],
            "context": {'artifact_id': query_device_2_result_item[2], 'artifact_external_id': query_device_2_result_item[3]},
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("quarantine device", parameters=parameters, name="quarantine_device_1", assets=["crowdstrike splunk soar connector"], callback=add_task_note_yes_quarantine)

    return


@phantom.playbook_block()
def add_task_note_no_quarantine(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_no_quarantine() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Do not quarantine the endpoint because the analyst responded No in the prompt.
    ################################################################################

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_no_quarantine' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "Analyst decision to quarantine device",
                        "content": "The analyst decided not to quarantine the endpoint.",
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_no_quarantine", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def add_task_note_yes_quarantine(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_yes_quarantine() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    content_formatted_string = phantom.format(
        container=container,
        template="""The analyst decided to quarantine the endpoint. The followuing device has been quarantined:\n\nhostname:{0}\n\ndevice_id {1}\n\n""",
        parameters=[
            "quarantine_device_1:action_result.parameter.hostname",
            "quarantine_device_1:action_result.parameter.device_id"
        ])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    quarantine_device_1_result_data = phantom.collect2(container=container, datapath=["quarantine_device_1:action_result.parameter.hostname","quarantine_device_1:action_result.parameter.device_id","quarantine_device_1:action_result.parameter.context.artifact_id","quarantine_device_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_yes_quarantine' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                for quarantine_device_1_result_item in quarantine_device_1_result_data:
                    if get_incident_1_result_item[0] is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None and content_formatted_string is not None:
                        parameters.append({
                            "id": get_incident_1_result_item[0],
                            "title": "Analyst decision to quarantine device",
                            "task_id": get_task_1_result_item[0],
                            "phase_id": get_phase_1_result_item[0],
                            "response_plan_id": get_incident_1_result_item[1],
                            "content": content_formatted_string,
                            "context": {'artifact_id': quarantine_device_1_result_item[2], 'artifact_external_id': quarantine_device_1_result_item[3]},
                        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_yes_quarantine", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def add_task_note_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_9() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    format_detect_description = phantom.get_format_data(name="format_detect_description")

    parameters = []

    # build parameters list for 'add_task_note_9' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and format_detect_description is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "Indicator creation in crowdstrike",
                        "content": format_detect_description,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_9", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def add_task_note_10(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_10() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    format_ignore_description = phantom.get_format_data(name="format_ignore_description")

    parameters = []

    # build parameters list for 'add_task_note_10' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and format_ignore_description is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "Indicator creation in crowdstrike",
                        "content": format_ignore_description,
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_10", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def prompt_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("prompt_2() called")

    # set user and message variables for phantom.prompt call

    user = "jarora"
    role = None
    message = """{0}\n\n"""

    # parameter list for template variable replacement
    parameters = [
        "repeat_incident_note:formatted_data"
    ]

    # responses
    response_types = [
        {
            "prompt": "Should Phantom quarantine the device?",
            "options": {
                "type": "list",
                "choices": [
                    "Yes",
                    "No"
                ],
            },
        }
    ]

    phantom.prompt2(container=container, user=user, role=role, message=message, respond_in_mins=60, name="prompt_2", parameters=parameters, response_types=response_types, callback=decision_4)

    return


@phantom.playbook_block()
def decision_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_4() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["prompt_2:action_result.summary.responses.0", "==", "Yes"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        quarantine_device_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    add_task_note_no_quarantine_1(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def quarantine_device_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("quarantine_device_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    query_device_2_result_data = phantom.collect2(container=container, datapath=["query_device_2:action_result.data.*.device_id","query_device_2:action_result.data.*.hostname","query_device_2:action_result.parameter.context.artifact_id","query_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'quarantine_device_2' call
    for query_device_2_result_item in query_device_2_result_data:
        parameters.append({
            "device_id": query_device_2_result_item[0],
            "hostname": query_device_2_result_item[1],
            "context": {'artifact_id': query_device_2_result_item[2], 'artifact_external_id': query_device_2_result_item[3]},
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("quarantine device", parameters=parameters, name="quarantine_device_2", assets=["crowdstrike splunk soar connector"], callback=add_task_not_yes_quarantine_1)

    return


@phantom.playbook_block()
def add_task_not_yes_quarantine_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_not_yes_quarantine_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    content_formatted_string = phantom.format(
        container=container,
        template="""The analyst decided to quarantine the endpoint. The followuing device has been quarantined:\n\nhostname:{0}\n\ndevice_id {1}\n\n\n""",
        parameters=[
            "quarantine_device_2:action_result.parameter.hostname",
            "quarantine_device_2:action_result.parameter.device_id"
        ])

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    quarantine_device_2_result_data = phantom.collect2(container=container, datapath=["quarantine_device_2:action_result.parameter.hostname","quarantine_device_2:action_result.parameter.device_id","quarantine_device_2:action_result.parameter.context.artifact_id","quarantine_device_2:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_not_yes_quarantine_1' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for quarantine_device_2_result_item in quarantine_device_2_result_data:
            for get_task_1_result_item in get_task_1_result_data:
                for get_phase_1_result_item in get_phase_1_result_data:
                    if get_incident_1_result_item[0] is not None and content_formatted_string is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                        parameters.append({
                            "id": get_incident_1_result_item[0],
                            "title": "Analyst decision to quarantine device",
                            "content": content_formatted_string,
                            "task_id": get_task_1_result_item[0],
                            "phase_id": get_phase_1_result_item[0],
                            "response_plan_id": get_incident_1_result_item[1],
                            "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_not_yes_quarantine_1", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def add_task_note_no_quarantine_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_task_note_no_quarantine_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    get_incident_1_result_data = phantom.collect2(container=container, datapath=["get_incident_1:action_result.data.*.id","get_incident_1:action_result.data.*.current_response_plan_phase.response_plan_id","get_incident_1:action_result.parameter.context.artifact_id","get_incident_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_task_1_result_data = phantom.collect2(container=container, datapath=["get_task_1:action_result.data.*.id","get_task_1:action_result.parameter.context.artifact_id","get_task_1:action_result.parameter.context.artifact_external_id"], action_results=results)
    get_phase_1_result_data = phantom.collect2(container=container, datapath=["get_phase_1:action_result.data.*.id","get_phase_1:action_result.parameter.context.artifact_id","get_phase_1:action_result.parameter.context.artifact_external_id"], action_results=results)

    parameters = []

    # build parameters list for 'add_task_note_no_quarantine_1' call
    for get_incident_1_result_item in get_incident_1_result_data:
        for get_task_1_result_item in get_task_1_result_data:
            for get_phase_1_result_item in get_phase_1_result_data:
                if get_incident_1_result_item[0] is not None and get_task_1_result_item[0] is not None and get_phase_1_result_item[0] is not None and get_incident_1_result_item[1] is not None:
                    parameters.append({
                        "id": get_incident_1_result_item[0],
                        "title": "Analyst decision to quarantine device",
                        "content": "The analyst decided not to quarantine the endpoint.",
                        "task_id": get_task_1_result_item[0],
                        "phase_id": get_phase_1_result_item[0],
                        "response_plan_id": get_incident_1_result_item[1],
                        "context": {'artifact_id': get_incident_1_result_item[2], 'artifact_external_id': get_incident_1_result_item[3]},
                    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add task note", parameters=parameters, name="add_task_note_no_quarantine_1", assets=["builtin_mc_connector"])

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return